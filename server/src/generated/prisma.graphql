# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type FriendRequest implements Node {
  id: ID!
  text: String!
  sender(where: UserWhereInput): User!
  target(where: UserWhereInput): User!
  createdAt: DateTime!
}

type Message implements Node {
  id: ID!
  text: String!
  sender(where: UserWhereInput): User!
  target(where: UserWhereInput): User!
  createdAt: DateTime!
}

type Post implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  text: String!
  author(where: UserWhereInput): User
  wallId: ID
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  name: String!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  sentMessages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
  receivedMessages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
  sentRequests(where: FriendRequestWhereInput, orderBy: FriendRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FriendRequest!]
  receivedRequests(where: FriendRequestWhereInput, orderBy: FriendRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FriendRequest!]
  friendList: [String!]
  profilePic: String
}


#
# Other Types
#

type AggregateFriendRequest {
  count: Int!
}

type AggregateMessage {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

scalar DateTime

"""
A connection to a list of items.
"""
type FriendRequestConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [FriendRequestEdge]!
  aggregate: AggregateFriendRequest!
}

input FriendRequestCreateInput {
  text: String!
  sender: UserCreateOneWithoutSentRequestsInput!
  target: UserCreateOneWithoutReceivedRequestsInput!
}

input FriendRequestCreateManyWithoutSenderInput {
  create: [FriendRequestCreateWithoutSenderInput!]
  connect: [FriendRequestWhereUniqueInput!]
}

input FriendRequestCreateManyWithoutTargetInput {
  create: [FriendRequestCreateWithoutTargetInput!]
  connect: [FriendRequestWhereUniqueInput!]
}

input FriendRequestCreateWithoutSenderInput {
  text: String!
  target: UserCreateOneWithoutReceivedRequestsInput!
}

input FriendRequestCreateWithoutTargetInput {
  text: String!
  sender: UserCreateOneWithoutSentRequestsInput!
}

"""
An edge in a connection.
"""
type FriendRequestEdge {
  """
  The item at the end of the edge.
  """
  node: FriendRequest!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum FriendRequestOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FriendRequestPreviousValues {
  id: ID!
  text: String!
  createdAt: DateTime!
}

type FriendRequestSubscriptionPayload {
  mutation: MutationType!
  node: FriendRequest
  updatedFields: [String!]
  previousValues: FriendRequestPreviousValues
}

input FriendRequestSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [FriendRequestSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [FriendRequestSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FriendRequestWhereInput
}

input FriendRequestUpdateInput {
  text: String
  sender: UserUpdateOneWithoutSentRequestsInput
  target: UserUpdateOneWithoutReceivedRequestsInput
}

input FriendRequestUpdateManyWithoutSenderInput {
  create: [FriendRequestCreateWithoutSenderInput!]
  connect: [FriendRequestWhereUniqueInput!]
  disconnect: [FriendRequestWhereUniqueInput!]
  delete: [FriendRequestWhereUniqueInput!]
  update: [FriendRequestUpdateWithWhereUniqueWithoutSenderInput!]
  upsert: [FriendRequestUpsertWithWhereUniqueWithoutSenderInput!]
}

input FriendRequestUpdateManyWithoutTargetInput {
  create: [FriendRequestCreateWithoutTargetInput!]
  connect: [FriendRequestWhereUniqueInput!]
  disconnect: [FriendRequestWhereUniqueInput!]
  delete: [FriendRequestWhereUniqueInput!]
  update: [FriendRequestUpdateWithWhereUniqueWithoutTargetInput!]
  upsert: [FriendRequestUpsertWithWhereUniqueWithoutTargetInput!]
}

input FriendRequestUpdateWithoutSenderDataInput {
  text: String
  target: UserUpdateOneWithoutReceivedRequestsInput
}

input FriendRequestUpdateWithoutTargetDataInput {
  text: String
  sender: UserUpdateOneWithoutSentRequestsInput
}

input FriendRequestUpdateWithWhereUniqueWithoutSenderInput {
  where: FriendRequestWhereUniqueInput!
  data: FriendRequestUpdateWithoutSenderDataInput!
}

input FriendRequestUpdateWithWhereUniqueWithoutTargetInput {
  where: FriendRequestWhereUniqueInput!
  data: FriendRequestUpdateWithoutTargetDataInput!
}

input FriendRequestUpsertWithWhereUniqueWithoutSenderInput {
  where: FriendRequestWhereUniqueInput!
  update: FriendRequestUpdateWithoutSenderDataInput!
  create: FriendRequestCreateWithoutSenderInput!
}

input FriendRequestUpsertWithWhereUniqueWithoutTargetInput {
  where: FriendRequestWhereUniqueInput!
  update: FriendRequestUpdateWithoutTargetDataInput!
  create: FriendRequestCreateWithoutTargetInput!
}

input FriendRequestWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [FriendRequestWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [FriendRequestWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  text: String
  """
  All values that are not equal to given value.
  """
  text_not: String
  """
  All values that are contained in given list.
  """
  text_in: [String!]
  """
  All values that are not contained in given list.
  """
  text_not_in: [String!]
  """
  All values less than the given value.
  """
  text_lt: String
  """
  All values less than or equal the given value.
  """
  text_lte: String
  """
  All values greater than the given value.
  """
  text_gt: String
  """
  All values greater than or equal the given value.
  """
  text_gte: String
  """
  All values containing the given string.
  """
  text_contains: String
  """
  All values not containing the given string.
  """
  text_not_contains: String
  """
  All values starting with the given string.
  """
  text_starts_with: String
  """
  All values not starting with the given string.
  """
  text_not_starts_with: String
  """
  All values ending with the given string.
  """
  text_ends_with: String
  """
  All values not ending with the given string.
  """
  text_not_ends_with: String
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  sender: UserWhereInput
  target: UserWhereInput
}

input FriendRequestWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

"""
A connection to a list of items.
"""
type MessageConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [MessageEdge]!
  aggregate: AggregateMessage!
}

input MessageCreateInput {
  text: String!
  sender: UserCreateOneWithoutSentMessagesInput!
  target: UserCreateOneWithoutReceivedMessagesInput!
}

input MessageCreateManyWithoutSenderInput {
  create: [MessageCreateWithoutSenderInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateManyWithoutTargetInput {
  create: [MessageCreateWithoutTargetInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateWithoutSenderInput {
  text: String!
  target: UserCreateOneWithoutReceivedMessagesInput!
}

input MessageCreateWithoutTargetInput {
  text: String!
  sender: UserCreateOneWithoutSentMessagesInput!
}

"""
An edge in a connection.
"""
type MessageEdge {
  """
  The item at the end of the edge.
  """
  node: Message!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum MessageOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MessagePreviousValues {
  id: ID!
  text: String!
  createdAt: DateTime!
}

type MessageSubscriptionPayload {
  mutation: MutationType!
  node: Message
  updatedFields: [String!]
  previousValues: MessagePreviousValues
}

input MessageSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [MessageSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [MessageSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MessageWhereInput
}

input MessageUpdateInput {
  text: String
  sender: UserUpdateOneWithoutSentMessagesInput
  target: UserUpdateOneWithoutReceivedMessagesInput
}

input MessageUpdateManyWithoutSenderInput {
  create: [MessageCreateWithoutSenderInput!]
  connect: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  delete: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutSenderInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutSenderInput!]
}

input MessageUpdateManyWithoutTargetInput {
  create: [MessageCreateWithoutTargetInput!]
  connect: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  delete: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutTargetInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutTargetInput!]
}

input MessageUpdateWithoutSenderDataInput {
  text: String
  target: UserUpdateOneWithoutReceivedMessagesInput
}

input MessageUpdateWithoutTargetDataInput {
  text: String
  sender: UserUpdateOneWithoutSentMessagesInput
}

input MessageUpdateWithWhereUniqueWithoutSenderInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutSenderDataInput!
}

input MessageUpdateWithWhereUniqueWithoutTargetInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutTargetDataInput!
}

input MessageUpsertWithWhereUniqueWithoutSenderInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutSenderDataInput!
  create: MessageCreateWithoutSenderInput!
}

input MessageUpsertWithWhereUniqueWithoutTargetInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutTargetDataInput!
  create: MessageCreateWithoutTargetInput!
}

input MessageWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [MessageWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [MessageWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  text: String
  """
  All values that are not equal to given value.
  """
  text_not: String
  """
  All values that are contained in given list.
  """
  text_in: [String!]
  """
  All values that are not contained in given list.
  """
  text_not_in: [String!]
  """
  All values less than the given value.
  """
  text_lt: String
  """
  All values less than or equal the given value.
  """
  text_lte: String
  """
  All values greater than the given value.
  """
  text_gt: String
  """
  All values greater than or equal the given value.
  """
  text_gte: String
  """
  All values containing the given string.
  """
  text_contains: String
  """
  All values not containing the given string.
  """
  text_not_contains: String
  """
  All values starting with the given string.
  """
  text_starts_with: String
  """
  All values not starting with the given string.
  """
  text_not_starts_with: String
  """
  All values ending with the given string.
  """
  text_ends_with: String
  """
  All values not ending with the given string.
  """
  text_not_ends_with: String
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  sender: UserWhereInput
  target: UserWhereInput
}

input MessageWhereUniqueInput {
  id: ID
}

type Mutation {
  createPost(data: PostCreateInput!): Post!
  createUser(data: UserCreateInput!): User!
  createMessage(data: MessageCreateInput!): Message!
  createFriendRequest(data: FriendRequestCreateInput!): FriendRequest!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  updateFriendRequest(data: FriendRequestUpdateInput!, where: FriendRequestWhereUniqueInput!): FriendRequest
  deletePost(where: PostWhereUniqueInput!): Post
  deleteUser(where: UserWhereUniqueInput!): User
  deleteMessage(where: MessageWhereUniqueInput!): Message
  deleteFriendRequest(where: FriendRequestWhereUniqueInput!): FriendRequest
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertMessage(where: MessageWhereUniqueInput!, create: MessageCreateInput!, update: MessageUpdateInput!): Message!
  upsertFriendRequest(where: FriendRequestWhereUniqueInput!, create: FriendRequestCreateInput!, update: FriendRequestUpdateInput!): FriendRequest!
  updateManyPosts(data: PostUpdateInput!, where: PostWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyMessages(data: MessageUpdateInput!, where: MessageWhereInput): BatchPayload!
  updateManyFriendRequests(data: FriendRequestUpdateInput!, where: FriendRequestWhereInput): BatchPayload!
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyMessages(where: MessageWhereInput): BatchPayload!
  deleteManyFriendRequests(where: FriendRequestWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
A connection to a list of items.
"""
type PostConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  title: String!
  text: String!
  wallId: ID
  author: UserCreateOneWithoutPostsInput
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutAuthorInput {
  title: String!
  text: String!
  wallId: ID
}

"""
An edge in a connection.
"""
type PostEdge {
  """
  The item at the end of the edge.
  """
  node: Post!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
  wallId_ASC
  wallId_DESC
}

type PostPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  text: String!
  wallId: ID
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PostSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PostSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  title: String
  text: String
  wallId: ID
  author: UserUpdateOneWithoutPostsInput
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PostUpdateWithoutAuthorDataInput {
  title: String
  text: String
  wallId: ID
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input PostWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PostWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PostWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  title: String
  """
  All values that are not equal to given value.
  """
  title_not: String
  """
  All values that are contained in given list.
  """
  title_in: [String!]
  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]
  """
  All values less than the given value.
  """
  title_lt: String
  """
  All values less than or equal the given value.
  """
  title_lte: String
  """
  All values greater than the given value.
  """
  title_gt: String
  """
  All values greater than or equal the given value.
  """
  title_gte: String
  """
  All values containing the given string.
  """
  title_contains: String
  """
  All values not containing the given string.
  """
  title_not_contains: String
  """
  All values starting with the given string.
  """
  title_starts_with: String
  """
  All values not starting with the given string.
  """
  title_not_starts_with: String
  """
  All values ending with the given string.
  """
  title_ends_with: String
  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  text: String
  """
  All values that are not equal to given value.
  """
  text_not: String
  """
  All values that are contained in given list.
  """
  text_in: [String!]
  """
  All values that are not contained in given list.
  """
  text_not_in: [String!]
  """
  All values less than the given value.
  """
  text_lt: String
  """
  All values less than or equal the given value.
  """
  text_lte: String
  """
  All values greater than the given value.
  """
  text_gt: String
  """
  All values greater than or equal the given value.
  """
  text_gte: String
  """
  All values containing the given string.
  """
  text_contains: String
  """
  All values not containing the given string.
  """
  text_not_contains: String
  """
  All values starting with the given string.
  """
  text_starts_with: String
  """
  All values not starting with the given string.
  """
  text_not_starts_with: String
  """
  All values ending with the given string.
  """
  text_ends_with: String
  """
  All values not ending with the given string.
  """
  text_not_ends_with: String
  wallId: ID
  """
  All values that are not equal to given value.
  """
  wallId_not: ID
  """
  All values that are contained in given list.
  """
  wallId_in: [ID!]
  """
  All values that are not contained in given list.
  """
  wallId_not_in: [ID!]
  """
  All values less than the given value.
  """
  wallId_lt: ID
  """
  All values less than or equal the given value.
  """
  wallId_lte: ID
  """
  All values greater than the given value.
  """
  wallId_gt: ID
  """
  All values greater than or equal the given value.
  """
  wallId_gte: ID
  """
  All values containing the given string.
  """
  wallId_contains: ID
  """
  All values not containing the given string.
  """
  wallId_not_contains: ID
  """
  All values starting with the given string.
  """
  wallId_starts_with: ID
  """
  All values not starting with the given string.
  """
  wallId_not_starts_with: ID
  """
  All values ending with the given string.
  """
  wallId_ends_with: ID
  """
  All values not ending with the given string.
  """
  wallId_not_ends_with: ID
  author: UserWhereInput
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message]!
  friendRequests(where: FriendRequestWhereInput, orderBy: FriendRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FriendRequest]!
  post(where: PostWhereUniqueInput!): Post
  user(where: UserWhereUniqueInput!): User
  message(where: MessageWhereUniqueInput!): Message
  friendRequest(where: FriendRequestWhereUniqueInput!): FriendRequest
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  messagesConnection(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection!
  friendRequestsConnection(where: FriendRequestWhereInput, orderBy: FriendRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FriendRequestConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

type Subscription {
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  message(where: MessageSubscriptionWhereInput): MessageSubscriptionPayload
  friendRequest(where: FriendRequestSubscriptionWhereInput): FriendRequestSubscriptionPayload
}

"""
A connection to a list of items.
"""
type UserConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreatefriendListInput {
  set: [String!]
}

input UserCreateInput {
  email: String!
  password: String!
  name: String!
  profilePic: String
  friendList: UserCreatefriendListInput
  posts: PostCreateManyWithoutAuthorInput
  sentMessages: MessageCreateManyWithoutSenderInput
  receivedMessages: MessageCreateManyWithoutTargetInput
  sentRequests: FriendRequestCreateManyWithoutSenderInput
  receivedRequests: FriendRequestCreateManyWithoutTargetInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutReceivedMessagesInput {
  create: UserCreateWithoutReceivedMessagesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutReceivedRequestsInput {
  create: UserCreateWithoutReceivedRequestsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSentMessagesInput {
  create: UserCreateWithoutSentMessagesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSentRequestsInput {
  create: UserCreateWithoutSentRequestsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPostsInput {
  email: String!
  password: String!
  name: String!
  profilePic: String
  friendList: UserCreatefriendListInput
  sentMessages: MessageCreateManyWithoutSenderInput
  receivedMessages: MessageCreateManyWithoutTargetInput
  sentRequests: FriendRequestCreateManyWithoutSenderInput
  receivedRequests: FriendRequestCreateManyWithoutTargetInput
}

input UserCreateWithoutReceivedMessagesInput {
  email: String!
  password: String!
  name: String!
  profilePic: String
  friendList: UserCreatefriendListInput
  posts: PostCreateManyWithoutAuthorInput
  sentMessages: MessageCreateManyWithoutSenderInput
  sentRequests: FriendRequestCreateManyWithoutSenderInput
  receivedRequests: FriendRequestCreateManyWithoutTargetInput
}

input UserCreateWithoutReceivedRequestsInput {
  email: String!
  password: String!
  name: String!
  profilePic: String
  friendList: UserCreatefriendListInput
  posts: PostCreateManyWithoutAuthorInput
  sentMessages: MessageCreateManyWithoutSenderInput
  receivedMessages: MessageCreateManyWithoutTargetInput
  sentRequests: FriendRequestCreateManyWithoutSenderInput
}

input UserCreateWithoutSentMessagesInput {
  email: String!
  password: String!
  name: String!
  profilePic: String
  friendList: UserCreatefriendListInput
  posts: PostCreateManyWithoutAuthorInput
  receivedMessages: MessageCreateManyWithoutTargetInput
  sentRequests: FriendRequestCreateManyWithoutSenderInput
  receivedRequests: FriendRequestCreateManyWithoutTargetInput
}

input UserCreateWithoutSentRequestsInput {
  email: String!
  password: String!
  name: String!
  profilePic: String
  friendList: UserCreatefriendListInput
  posts: PostCreateManyWithoutAuthorInput
  sentMessages: MessageCreateManyWithoutSenderInput
  receivedMessages: MessageCreateManyWithoutTargetInput
  receivedRequests: FriendRequestCreateManyWithoutTargetInput
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  profilePic_ASC
  profilePic_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  name: String!
  friendList: [String!]
  profilePic: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdatefriendListInput {
  set: [String!]
}

input UserUpdateInput {
  email: String
  password: String
  name: String
  profilePic: String
  friendList: UserUpdatefriendListInput
  posts: PostUpdateManyWithoutAuthorInput
  sentMessages: MessageUpdateManyWithoutSenderInput
  receivedMessages: MessageUpdateManyWithoutTargetInput
  sentRequests: FriendRequestUpdateManyWithoutSenderInput
  receivedRequests: FriendRequestUpdateManyWithoutTargetInput
}

input UserUpdateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateOneWithoutReceivedMessagesInput {
  create: UserCreateWithoutReceivedMessagesInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutReceivedMessagesDataInput
  upsert: UserUpsertWithoutReceivedMessagesInput
}

input UserUpdateOneWithoutReceivedRequestsInput {
  create: UserCreateWithoutReceivedRequestsInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutReceivedRequestsDataInput
  upsert: UserUpsertWithoutReceivedRequestsInput
}

input UserUpdateOneWithoutSentMessagesInput {
  create: UserCreateWithoutSentMessagesInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutSentMessagesDataInput
  upsert: UserUpsertWithoutSentMessagesInput
}

input UserUpdateOneWithoutSentRequestsInput {
  create: UserCreateWithoutSentRequestsInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutSentRequestsDataInput
  upsert: UserUpsertWithoutSentRequestsInput
}

input UserUpdateWithoutPostsDataInput {
  email: String
  password: String
  name: String
  profilePic: String
  friendList: UserUpdatefriendListInput
  sentMessages: MessageUpdateManyWithoutSenderInput
  receivedMessages: MessageUpdateManyWithoutTargetInput
  sentRequests: FriendRequestUpdateManyWithoutSenderInput
  receivedRequests: FriendRequestUpdateManyWithoutTargetInput
}

input UserUpdateWithoutReceivedMessagesDataInput {
  email: String
  password: String
  name: String
  profilePic: String
  friendList: UserUpdatefriendListInput
  posts: PostUpdateManyWithoutAuthorInput
  sentMessages: MessageUpdateManyWithoutSenderInput
  sentRequests: FriendRequestUpdateManyWithoutSenderInput
  receivedRequests: FriendRequestUpdateManyWithoutTargetInput
}

input UserUpdateWithoutReceivedRequestsDataInput {
  email: String
  password: String
  name: String
  profilePic: String
  friendList: UserUpdatefriendListInput
  posts: PostUpdateManyWithoutAuthorInput
  sentMessages: MessageUpdateManyWithoutSenderInput
  receivedMessages: MessageUpdateManyWithoutTargetInput
  sentRequests: FriendRequestUpdateManyWithoutSenderInput
}

input UserUpdateWithoutSentMessagesDataInput {
  email: String
  password: String
  name: String
  profilePic: String
  friendList: UserUpdatefriendListInput
  posts: PostUpdateManyWithoutAuthorInput
  receivedMessages: MessageUpdateManyWithoutTargetInput
  sentRequests: FriendRequestUpdateManyWithoutSenderInput
  receivedRequests: FriendRequestUpdateManyWithoutTargetInput
}

input UserUpdateWithoutSentRequestsDataInput {
  email: String
  password: String
  name: String
  profilePic: String
  friendList: UserUpdatefriendListInput
  posts: PostUpdateManyWithoutAuthorInput
  sentMessages: MessageUpdateManyWithoutSenderInput
  receivedMessages: MessageUpdateManyWithoutTargetInput
  receivedRequests: FriendRequestUpdateManyWithoutTargetInput
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserUpsertWithoutReceivedMessagesInput {
  update: UserUpdateWithoutReceivedMessagesDataInput!
  create: UserCreateWithoutReceivedMessagesInput!
}

input UserUpsertWithoutReceivedRequestsInput {
  update: UserUpdateWithoutReceivedRequestsDataInput!
  create: UserCreateWithoutReceivedRequestsInput!
}

input UserUpsertWithoutSentMessagesInput {
  update: UserUpdateWithoutSentMessagesDataInput!
  create: UserCreateWithoutSentMessagesInput!
}

input UserUpsertWithoutSentRequestsInput {
  update: UserUpdateWithoutSentRequestsDataInput!
  create: UserCreateWithoutSentRequestsInput!
}

input UserWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  email: String
  """
  All values that are not equal to given value.
  """
  email_not: String
  """
  All values that are contained in given list.
  """
  email_in: [String!]
  """
  All values that are not contained in given list.
  """
  email_not_in: [String!]
  """
  All values less than the given value.
  """
  email_lt: String
  """
  All values less than or equal the given value.
  """
  email_lte: String
  """
  All values greater than the given value.
  """
  email_gt: String
  """
  All values greater than or equal the given value.
  """
  email_gte: String
  """
  All values containing the given string.
  """
  email_contains: String
  """
  All values not containing the given string.
  """
  email_not_contains: String
  """
  All values starting with the given string.
  """
  email_starts_with: String
  """
  All values not starting with the given string.
  """
  email_not_starts_with: String
  """
  All values ending with the given string.
  """
  email_ends_with: String
  """
  All values not ending with the given string.
  """
  email_not_ends_with: String
  password: String
  """
  All values that are not equal to given value.
  """
  password_not: String
  """
  All values that are contained in given list.
  """
  password_in: [String!]
  """
  All values that are not contained in given list.
  """
  password_not_in: [String!]
  """
  All values less than the given value.
  """
  password_lt: String
  """
  All values less than or equal the given value.
  """
  password_lte: String
  """
  All values greater than the given value.
  """
  password_gt: String
  """
  All values greater than or equal the given value.
  """
  password_gte: String
  """
  All values containing the given string.
  """
  password_contains: String
  """
  All values not containing the given string.
  """
  password_not_contains: String
  """
  All values starting with the given string.
  """
  password_starts_with: String
  """
  All values not starting with the given string.
  """
  password_not_starts_with: String
  """
  All values ending with the given string.
  """
  password_ends_with: String
  """
  All values not ending with the given string.
  """
  password_not_ends_with: String
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  profilePic: String
  """
  All values that are not equal to given value.
  """
  profilePic_not: String
  """
  All values that are contained in given list.
  """
  profilePic_in: [String!]
  """
  All values that are not contained in given list.
  """
  profilePic_not_in: [String!]
  """
  All values less than the given value.
  """
  profilePic_lt: String
  """
  All values less than or equal the given value.
  """
  profilePic_lte: String
  """
  All values greater than the given value.
  """
  profilePic_gt: String
  """
  All values greater than or equal the given value.
  """
  profilePic_gte: String
  """
  All values containing the given string.
  """
  profilePic_contains: String
  """
  All values not containing the given string.
  """
  profilePic_not_contains: String
  """
  All values starting with the given string.
  """
  profilePic_starts_with: String
  """
  All values not starting with the given string.
  """
  profilePic_not_starts_with: String
  """
  All values ending with the given string.
  """
  profilePic_ends_with: String
  """
  All values not ending with the given string.
  """
  profilePic_not_ends_with: String
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  sentMessages_every: MessageWhereInput
  sentMessages_some: MessageWhereInput
  sentMessages_none: MessageWhereInput
  receivedMessages_every: MessageWhereInput
  receivedMessages_some: MessageWhereInput
  receivedMessages_none: MessageWhereInput
  sentRequests_every: FriendRequestWhereInput
  sentRequests_some: FriendRequestWhereInput
  sentRequests_none: FriendRequestWhereInput
  receivedRequests_every: FriendRequestWhereInput
  receivedRequests_some: FriendRequestWhereInput
  receivedRequests_none: FriendRequestWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
  name: String
}
