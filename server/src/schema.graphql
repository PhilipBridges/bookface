# import Post, Message, MessageSubscriptionPayload, FriendRequest, PostSubscriptionPayload, BatchPayload from "./generated/prisma.graphql"

type Query {
  feed(wallId: ID, orderBy: MessageOrderByInput): [Post!]!
  allFeed(orderBy: PostOrderByInput, first: Int, last: Int, before: String, after: String): [Post!]!
  post(id: ID!, wallId: ID): Post!
  me: User
  userQuery: [User!]
  boxQuery(sender: ID!, first: Int, after: String, before: String, last: Int, orderBy: MessageOrderByInput): [Message!]!
  messageQuery(first: Int, after: String, before: String, last: Int, orderBy: MessageOrderByInput): [Message!]!
  friendQuery(target: ID!): Profile
  sidebarFriendQuery: [User!]!
  requestQuery(target: ID, sender: ID): [FriendRequest!]
}

type Subscription {
  message(orderBy: MessageOrderByInput): MessageSubscriptionPayload
}

type Mutation {
  signup(email: String!, password: String!, name: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  createPost(title: String!, text: String!, wallId: ID): Post!
  deletePost(id: ID!): Post!
  createMessage(text: String!, target: String!, error: String): MessagePayload
  deleteMessage(id: ID!): Message
  deleteMessages(id: ID!): BatchPayload!
  createRequest(target: ID!, text: String): Boolean
  deleteRequest(id: ID!): Boolean
  deleteRequests: BatchPayload!
  addFriend(target: ID!, request: ID!): User
  deleteFriend(target: ID!): User
  uploadFile(file: Upload!): Boolean
  updateUsers: BatchPayload!
}

type AuthPayload {
  token: String
  user: User
  error: String
}

type User {
  id: ID
  email: String
  name: String
  posts: [Post!]
  friendList: [String!]
  profilePic: String!
}

type Profile {
  proId: ID!
  proName: String!
  friendList: [User!]!
  profilePic: String
}

type MessagePayload {
  id: ID
  text: String
  sender(where: UserWhereInput): User
  target(where: UserWhereInput): User
  createdAt: DateTime
  error: String
}

scalar Upload